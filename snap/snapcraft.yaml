%YAML 1.2
---
# Snapcraft Recipe for [Project]
# ------------------------------
# This file is in the YAML data serialization format:
# http://yaml.org
# For the spec. of writing this file refer the following documentation:
# * The snapcraft syntax
#   https://docs.snapcraft.io/build-snaps/syntax
# * Snap Docs
#   https://snapdocs.labix.org
# * Latest doc topics in the Snapcraft Forum
#   https://forum.snapcraft.io/c/doc
# For support refer to the snapcraft section in the Snapcraft Forum:
# https://forum.snapcraft.io/c/snapcraft

# All following comments, including this one, are designed to be stripped
# before contributing the recipe to the upstream

# my-awesome-snap, my-app-name, my-app-command, my-app-launch, my-app-part
# are placeholders text meant to be replaced by appropriate content

name: my-awesome-snap
summary: Single-line elevator pitch for your amazing snap under 79 chars.
description: |
  This is my-awesome-snap's description. You have a paragraph or two to tell
  the most important story about your snap. Keep it under 100 words though,
  we live in tweetspace and your description wants to look good in the snap
  store.

# Just for humans, typically '1.2+git' or '1.3.2'
# The wrapping single quotes are often required to avoid the version string
# being accidentally interpreted as a YAML floating point number(like '1.2').
# http://yaml.org/spec/1.2/spec.html#id2804092
# https://arp242.net/weblog/yaml_probably_not_so_great_after_all.html#surprising-behaviour
version: determined-by-version-script

# (OPTIONAL) The version string can also be dynamically determined via scriping
# , in this case the value of the `version` key will be ignored (but the key is
# still required).
# NOTE: The resulting version string cannot be longer than 32 characters
#version-script: snap/utilites/set-snap-version.bash
#version-script: git -C parts/my-app-part/src describe --always --dirty --tags
version-script: |
  set \
    -o errexit \
    -o nounset

  upstream_version="$(
    git \
      -C parts/my-app-part/src \
      describe \
      --always \
      --dirty=-d \
      --tags \
    | sed s/^v//
  )"

  packaging_revision="$(
    git \
      describe \
      --abbrev=4 \
      --always \
      --match nothing \
      --dirty=-d
  )"

  printf -- '%s' "${upstream_version}+pkg-${packaging_revision}"

confinement: devmode # use 'strict' once you have the right plugs and slots
grade: devel
icon: snap/gui/icon.png

apps:
  # If the my-app-name is identical with the my-awesome-snap it can be directly run
  # with `my-awesome-snap` or `snap run my-awesome-snap`, otherwise it can only be run
  # via `snap run my-awesome-snap.my-app-name` in the terminal.
  my-app-name:
    command: desktop-launch my-app-launch
    #desktop: share/applications/my-app-name.desktop
    plugs:
    - desktop
    - desktop-legacy
    - x11
    - unity7
    - wayland

    #slots:

parts:
  # Launchers to fix the runtime environment to make the snap works
  launchers:
    source: snap/launchers
    source-type: local
    plugin: dump

    override-build: |
      set \
        -o errexit \
        -o nounset

      mkdir \
        --parents \
        "${SNAPCRAFT_PART_INSTALL}"/bin
      find \
        . \
        -type f \
        -perm /111 \
        -print0 \
        | xargs \
          --no-run-if-empty \
          --null \
          --verbose \
          -I{} \
          cp \
          {} \
          "${SNAPCRAFT_PART_INSTALL}"/bin

  # Patches to make the snap working if it can't be solved via launchers
  patches:
    source: snap/patches
    source-type: local
    plugin: dump

    override-build: |
      set \
        -o errexit \
        -o nounset

      mkdir \
        --parents \
        "$SNAPCRAFT_PART_INSTALL"/patches
      find \
        . \
        -type f \
        -and \
        -not \
        -name README.md \
        -print0 \
        | xargs \
          --no-run-if-empty \
          --null \
          --verbose \
          -I{} \
          cp \
          {} \
          "${SNAPCRAFT_PART_INSTALL}"/patches

    stage:
    - patches/*
    override-prime: 'true'

  # Helper programs to aid in certain part of snap building, like a install program for a certain part
  utilities:
    source: snap/utilities
    source-type: local
    plugin: dump

    override-build: |
      set \
        -o errexit \
        -o nounset

      mkdir \
        --parents \
        "$SNAPCRAFT_PART_INSTALL"/utilities
      find \
        . \
        -type f \
        -and \
        -not \
        -name README.md \
        -print0 \
        | xargs \
          --no-run-if-empty \
          --null \
          --verbose \
          -I{} \
          cp \
          {} \
          "${SNAPCRAFT_PART_INSTALL}"/utilities
    override-prime: 'true'

  yad:
    after:
    - desktop-gtk3

    plugin: nil
    stage-packages:
    - yad

  my-app-part:
    after:
    - patches

    # Run `snapcraft help sources` for supported keywords on pulling
    # a part's source ingredients
    #source:
    #source-type:
    #source-tag:
    #source-depth:

    # Run `snapcraft plugins` for supported helper plugins
    # Run `snapcraft help plugins` for supported keywords on building
    # a part
    plugin: nil

    override-stage: |
      set \
        -o errexit \
        -o nounset

      snapcraftctl stage

      find \
        "${SNAPCRAFT_STAGE}"/share/applications \
        -name '*.desktop' \
        -print0 \
        | xargs \
          --no-run-if-empty \
          --null \
          --verbose \
          sed \
          --file "${SNAPCRAFT_STAGE}"/patches/patch-desktop-entries.sed \
          --in-place
