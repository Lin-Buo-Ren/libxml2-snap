%YAML 1.2
---
# Snapcraft Recipe for XML Toolkit from the GNOME Project
# ------------------------------
# This file is in the YAML data serialization format:
# http://yaml.org
# For the spec. of writing this file refer the following documentation:
# * The snapcraft syntax
#   https://docs.snapcraft.io/build-snaps/syntax
# * Snap Docs
#   https://snapdocs.labix.org
# * Latest doc topics in the Snapcraft Forum
#   https://forum.snapcraft.io/c/doc
# For support refer to the snapcraft section in the Snapcraft Forum:
# https://forum.snapcraft.io/c/snapcraft

name: libxml2-utils-brlin
summary: XML Toolkit from the GNOME Project
description: |
  Libxml2 is the XML C parser and toolkit developed for the Gnome project (but usable outside of the Gnome platform), it is free software available under the MIT License.

  This snap ships the latest released and development snapshot of libxml2 itself and expose its utilites to the system.

  This snap is NOT OFFICIAL, for any issue regarding using the snap please refer to the issue tracker:

  https://github.com/Lin-Buo-Ren/libxml2-snap

version: determined-by-version-script

version-script: |
  set \
    -o errexit \
    -o nounset

  upstream_version="$(
    git \
      -C parts/libxml2/src \
      describe \
      --always \
      --dirty=-d \
      --tags \
    | sed s/^v//
  )"

  packaging_revision="$(
    git \
      describe \
      --abbrev=4 \
      --always \
      --match nothing \
      --dirty=-d
  )"

  printf -- '%s' "${upstream_version}+pkg-${packaging_revision}"

confinement: devmode
grade: devel
icon: snap/gui/icon.png

apps:
  xmllint:
    command: xmllint
    plugs:
    - home
    - removable-media

  xmlcatalog:
    command: xmlcatalog
    plugs:
    - home
    - removable-media

parts:
  # Launchers to fix the runtime environment to make the snap works
  launchers:
    source: snap/launchers
    source-type: local
    plugin: dump

    override-build: |
      set \
        -o errexit \
        -o nounset

      mkdir \
        --parents \
        "${SNAPCRAFT_PART_INSTALL}"/bin
      find \
        . \
        -type f \
        -perm /111 \
        -print0 \
        | xargs \
          --no-run-if-empty \
          --null \
          --verbose \
          -I{} \
          cp \
          {} \
          "${SNAPCRAFT_PART_INSTALL}"/bin

  # Patches to make the snap working if it can't be solved via launchers
  patches:
    source: snap/patches
    source-type: local
    plugin: dump

    override-build: |
      set \
        -o errexit \
        -o nounset

      mkdir \
        --parents \
        "$SNAPCRAFT_PART_INSTALL"/patches
      find \
        . \
        -type f \
        -and \
        -not \
        -name README.md \
        -print0 \
        | xargs \
          --no-run-if-empty \
          --null \
          --verbose \
          -I{} \
          cp \
          {} \
          "${SNAPCRAFT_PART_INSTALL}"/patches

    stage:
    - patches/*
    override-prime: 'true'

  # Helper programs to aid in certain part of snap building, like a install program for a certain part
  utilities:
    source: snap/utilities
    source-type: local
    plugin: dump

    override-build: |
      set \
        -o errexit \
        -o nounset

      mkdir \
        --parents \
        "$SNAPCRAFT_PART_INSTALL"/utilities
      find \
        . \
        -type f \
        -and \
        -not \
        -name README.md \
        -print0 \
        | xargs \
          --no-run-if-empty \
          --null \
          --verbose \
          -I{} \
          cp \
          {} \
          "${SNAPCRAFT_PART_INSTALL}"/utilities
    override-prime: 'true'

  my-app-part:
    after:
    - patches

    # Run `snapcraft help sources` for supported keywords on pulling
    # a part's source ingredients
    #source:
    #source-type:
    #source-tag:
    #source-depth:

    # Run `snapcraft plugins` for supported helper plugins
    # Run `snapcraft help plugins` for supported keywords on building
    # a part
    plugin: nil

    override-stage: |
      set \
        -o errexit \
        -o nounset

      snapcraftctl stage

      find \
        "${SNAPCRAFT_STAGE}"/share/applications \
        -name '*.desktop' \
        -print0 \
        | xargs \
          --no-run-if-empty \
          --null \
          --verbose \
          sed \
          --file "${SNAPCRAFT_STAGE}"/patches/patch-desktop-entries.sed \
          --in-place
